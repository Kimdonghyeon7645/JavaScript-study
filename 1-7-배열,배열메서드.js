var ppap = ['p', 'p', 'a', 'p']
alert(ppap);
// alert(ppap[0]);      // p
// alert(ppap[1]);      // p
// alert(ppap[2]);      // a
// alert(ppap[3]);      // p
alert(ppap[0] + ppap[1] + ppap[2] + ppap[3]);
/*
배열(array)이란, 데이터 낱개로 하나하나가 아니라, 여러개를 모아서 하나로 관리하는 데이터 타입(자료형)이다.
지금까지 변수가 하나의 데이터를 저장할 수 있었다면, 배열은 여러 개의 데이터를 하나의 변수에 저장할 수 있다.

배열도 하나의 변수에 담아서 정의하는데, 여러개의 데이터를 배열로 담을 때는 데이터들을 []로 감싸고 ,로 구분해서 변수에 대입해야 한다.
이렇게 하면 배열을 변수에 담은 것이며, 반대로 배열에 담긴 값을 가져올 때는, []안에 인덱스를 넣어서 해당 인덱스의 데이터를 가져온다.

배열이 여러개이다 보니까 여러번 코드를 반복문과 결합해서 사용했을 때 시너지를 낼 수 있다.
*/

for(var i = 0; i < 4; i++){
    document.write(ppap[i] + ' ')
    // 참고로 document.write() 함수는 인자값을 전달받아서 웹페이지 안에 작성해주는 함수다.
}

alert(ppap.length)
/*
배열의 크기는 
배열.length 와 같이 해서 배열의 크기를 반환할 수 있다.


배열의 원소 추가

배열.push() 로, 인자값으로 데이터를 넘겨주면, 그 데이터를 해당 배열에 추가한다.

배열.concat() 는, 인자값으로 배열을 전달받아서 해당 배열에 추가한 배열 상태를 반환한다.
(배열 = 배열.concat() 과 같이 해야지, 해당 배열이 해당 데이터가 추가된 상태를 저장한다.)

배열.unshift() 는, 배열의 시작점에 원소를 추가한다. (push()는 이와 다르게 배열의 끝에 원소를 추가.)

배열.splice(인덱스, 범위, 추가할 값) 은 인자가 3가지 있는데,
배열의 (인덱스)~(인덱스+범위) 인덱스에 속하는 모든 원소를 삭제하고, 그 인덱스 위치에 추가할 값을 배열에 원소로 추가한다.
범위가 0이면 아무 원소도 삭제하지 않는다. 
추가할 값은 여러개가 올 수도 있으며, (전부 생략할 수 있다.) 원하는 추가할 값만큼 인자값으로 넘기면 된다.
(ex> .splice(1, 2, 'a', 'b') == 1인덱스 부터 1+2(3)인덱스 까지의 원소를 제거하고, 그 위치에 원소 'a' 와 'b'를 추가한다.)
*/

ppap.push('!')
alert(ppap)
ppap = ppap.concat(['ha', 'ha'])
alert(ppap)
ppap.unshift('wow!')
alert(ppap)
ppap.splice(1, 5, 'ha')
alert(ppap)

/* 배열의 원소 제거

배열.shift() 는, 배열의 첫번째 원소를 제거한다.

배열.pop() 은 반대로 배열의 마지막 원소를 제거한다.

(특정 인덱스의 원소(아니면 여러 원소들을)를 제거할려면 splice() 메서드를 이용하자.)
*/

ppap.shift()
alert(ppap)
ppap.pop()
alert(ppap)
ppap.splice(0, 1)   // 이렇게 특정 인덱스의 원소를 splice 로 지울 수 있다.
alert(ppap)

/* 배열의 정렬

배열.sort()는 배열의 원소들을 오름차순으로 정렬한다. 

배열.reverse()는 배열의 원소들의 인덱스를 거꾸로 뒤집는다. (내림차순으로 정렬하는 것이 아니다.)
*/

var arr = [1, 3, 2, 'a', 'c', 'b']
arr.sort()
alert(arr)
arr = [1, 3, 2, 'a', 'c', 'b']
arr.reverse()
alert(arr)