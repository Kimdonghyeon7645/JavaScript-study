var a = 'global'   // 전역변수
function scope(){
    var a = 'local' // 지역변수
    console.log(a)
}
console.log(a)
/*
유효범위는 Scope(스코프)라고 하며, 말그대로 변수의 유효한 범위를 말한다.
(수명이라고도 한다)

함수 밖에서 선언한 변수는 전역변수로, 애플리케이션 전역(모든 함수안)에서 그 변수를 접근할 수 있다.
반대로 함수 안에서 선언한 변수는 지역변수로, 해당 함수 안애서만 변수를 접근할 수 있다.
만약에 같은 이름의 지역변수, 전역변수가 있으면 지역변수가 우선으로 쓰인다.
*/

function a (){  // 지역변수를 사용
    var i = 0
}
for(var i = 0; i < 5; i++){
    a()
    document.write(i)
}   // 출력결과 : 01234

function b(){   // 전역변수를 사용
    i = 0
}
for(i = 0; i < 5; i++){
    b()
    document.write(i)
}   // 출력결과 : 0(무한반복)
/*
전역변수는 다른 로직에서 이름만 같아도, 목적에 상관없이 같은 변수라고 js는 처리하기에,
의도하지 않은 문제가 발생하기 쉽다. 그래서 자제해서 사용해야되고, 
변수를 선언할 때, var를 붙이는 걸 기억하고 있어야 된다. 그렇지 않으면 이미 선언하는 변수랑 같은 이름의 변수가 있을 경우,
변수를 새로 선언하는 것이 아니라, 기존의 전역변수의 값을 다시 대입하는 것이 되어버린다. (의도와 별개의 결과가 된다.)
*/

/*
대신에 자바스크립트의 var 변수는 선언되어있는 함수에서만 사용되기에,
if for 같은 스코프에서는 해당되지 않지만, (주의해야된다) 함수의 스코프 안에서만에선 한정이 된다.
이러한 유호범위의 방식을 정적 유효범위(static scoping), 렉시컬(lexical scoping)이라고 한다.
*/
