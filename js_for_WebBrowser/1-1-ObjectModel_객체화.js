/* Object Model (객체 모델) :
웹 브라우저의 구성 요소들은 각각이 모두 객체화 되어있다. 뭔소리여?

대강,

<!DOCTYPE html>
<html>
<head></head>
<body>
    <p>하하</p>
</body>
</html>

이라는 html 소스가 있다고 할때, 여기서 웹브라우저에 출력되는 '하하'를 자바스크립트로 제어할려면,
일단 하하의 <p></p> 태그가 자바스크립트로 제어할 수 있는 형태=Object(객체) 여야 한다.

이런 Object(객체)는 따로 만들어줄 필요없이 브라우저에서 이미 html 소스를 읽는 과정에서,
각각의 모든 태그들마다, 미리 객체를 만들어 놓고 준비해 두고 있다.
그렇기에 우리가 할꺼는 이미 만들어진 태그에 대한 객체를 찾아서, 
객체에다가 메쏘드를 호출하거나, 원하는 객체의 속성 값을 가져온다던가 처럼 객체를 제어할 수 있는 것이다.

따라서 자바스크립트로 브라우저를 제어할려면, 결국은 (html을 구성하는 각각의 태그에 해당하는)객체를 제어해야한다.


아까 브라우저가 html 소스를 읽으면서 객체들을 미리 다 준비해 둔다 했었는데,
브라우저가 만드는 객체에도 모델(구조)가 있는데,

일단 전역객체로(모든 객체의 부모? 가 되는) Window 객체가 있다. 
이 객체 아래로 DOM, BOM, JavaScriptCore 객체가 있는 것이다. (이러한 객체는 동시에 window 전역객체의 속성(프로퍼티)이기도 하다.)
참고로 전역객체 window 는 특수한 객체여서, 'window.하위객체' 라 하지 않고, '하위객체' 로만 사용해도, 둘다 똑같은 의미다.
('하위객체'처럼 상위 객체를 적어주지 않으면, 하위객체는 자동(암시적)으로 window 전역객체의 속성이 된다.)


DOM은 Document Object Model(문서객체모델)의 약자로, 말그대로 웹문서(html안의 내용)의 객체 모델이 여기에 속한다.
DOM에선 기본적으로 Document 객체가 있다.  (window 가 가지고 있는 속성중 가장 중요하다)
Document 객체의 속성(프로퍼티)으로 img태그, p태그, body태그등 문서 내의 주요 요소에 접근할 수 있는 객체를 제공한다.
Document 객체의 메서드로 특정한 요소의 객체를 획득할 수 있는 메서드(document.getElementsByTagName('태그이름')) 같은 것들이 제공된다. 


BOM은 Browser Object Model(브라우저객체모델)의 약자로, 웹페이지 내용을 뺀 브라우저의 각종 요소들을 객체화 시킨 것들이다.
window 전역객체의 속성에 속하는 객체들이며, 브라우저에서 지역(window.location), 경고창(window.alert())을 띄우는 것 등 여러가지가 있다. 


JavaScript Core는 JS라면 기본적으로 있는 객체(배열(Array), 함수(function),...) 들을 말하며, 
JS 의 호스트 환경(실행환경)이 어디든지(node.js, GoogleAppsScript, ...) 항상 있다.
위의 DOM 과 BOM 은 브라우저라는 호스트 환경에서만 존재하는 객체들이며, node.js 같은 다른 호스트 환경에서는 존재하지 않지만,
JavaScript Core 는 JS이라면 어떤 호스트 환경이든지 존재하는 객체다.


앞으로의(생활코딩에서의) 공부는 객체를 이 세가지(DOM, BOM, javascriptcore)의 큰 틀에서 틀안에 해당되는 객체들을 배워가게 된다.
*/

// 요소 != 태그 : 
// 태그는 <a>시작태그, </a>종료태그, <br />빈태그 같은 것들을 말하며, 
// 요소는 시작태그부터 끝태그까지를 말한다. ex) <p>암튼 요소임.</P>
// https://opentutorials.org/module/966/6986

